---
title: "Exercise: Hollywood Age Gaps"
subtitle: "Session 03 - 🔨 Working with R "
date: last-modified
date-format: "DD.MM.YYYY"
format: 
  html:
    toc: true
    toc-depth: 4
callout-appearance: simple
execute: 
  cache: true
  eval: true
  echo: true
  message: false
  warning: false
highlight-style: atom-one
editor_options: 
  chunk_output_type: console
---

::: {.callout-tip icon="false"}
![Quarto Slides](https://raw.githubusercontent.com/faucommsci/teaching_materials/refs/heads/main/images/badges/badge-quarto-slide.svg) Link to slides

[![](https://raw.githubusercontent.com/faucommsci/teaching_materials/refs/heads/main/images/badges/badge-quarto_document.svg) Download source file](https://github.com/chrdrn/dbd_2024/blob/main/exercises/exercise-03.qmd) 
:::

::: callout-note
## Ziel der Anwendung: Grundlagen der Datenexploration in R

-   Auffrischung der Grundkenntnisse im Umgang mit R, tidyverse und ggplot2
-   Nützliche Funktionen aus dem `easystats`-verse kennenlernen
:::

## Background

::: callout-tip
## Todays's data basis: Hollywood Age Gaps

> An informational site showing the age gap between movie love interests.

The data follows certain rules:

-   The two (or more) actors play actual love interests (not just friends, coworkers, or some other non-romantic type of relationship)
-   The youngest of the two actors is at least 17 years old
-   Not animated characters
:::

-   The best way to learn R is by trying. This document tries to display a version of the "normal" data processing procedure.
-   Use `tidytuesday` data as an example to showcase the potential

## Preparation

### Packages

The `pacman::p_load()` package is used to load the packages, which has several advantages over the conventional method with `library()`:

-   Concise syntax
-   Automatic installation (if the package is not already installed)
-   Loading multiple packages at once
-   Automatic search for dependencies

```{r load-packages}
pacman::p_load(
  here, 
  magrittr, 
  tidyverse,
  janitor,
  easystats,
  sjmisc,
  ggpubr)
```

### Import und Vorverarbeitung der Daten

| Variable | Description |
|:-------------------------|:---------------------------------------------|
| `movie_name` | Name of the film |
| `release_year` | Release year |
| `director` | Director of the film |
| `age_difference` | Age difference between the characters in whole years |
| `couple_number` | An identifier for the couple in case multiple couples are listed for this film |
| `actor_1_name` | The name of the older actor in this couple |
| `actor_2_name` | The name of the younger actor in this couple |
| `actor_1_birthdate` | The birthdate of the older member of the couple |
| `actor_2_birthdate` | The birthdate of the younger member of the couple |
| `actor_1_age` | The age of the older actor when the film was released |
| `actor_2_age` | The age of the younger actor when the film was released |

: Variablennamen und -beschreibungen

```{r import-data-raw}
# Import data from URL
age_gaps <- read_csv("http://hollywoodagegap.com/movies.csv") %>% 
  janitor::clean_names()
```

```{r recode-data-to-correct}
# Correct data
age_gaps_correct <- age_gaps %>% 
  mutate(
    across(ends_with("_birthdate"), ~as.Date(.)) # set dates to dates
  )
```

## 🛠️ Praktische Übung

::: callout-important
## Achtung, bitte lesen!

-   Bevor Sie mit der Arbeit an den folgenden 📋 **Exercises** beginnen, stellen Sie bitte sicher, dass Sie alle Chunks des Abschnitts [Preparation] ausgeführt haben. Das können Sie tun, indem Sie den "*Run all chunks above*"-Knopf ![](https://raw.githubusercontent.com/faucommsci/teaching_materials/main/images/buttons/rstudio-button-render_all_chunks_above.png) des nächsten Chunks benutzen.
-   Bei Fragen zum Code lohnt sich ein Blick in den **Showcase** (.qmd oder .html). Beim Showcase handelt es sich um eine kompakte Darstellung des in der Präsentation verwenden R-Codes. Sie können das Showcase also nutzen, um sich die Code-Bausteine anzusehen, die für die R-Outputs auf den Slides benutzt wurden.
:::

### 🔎 Welche Rolle spielt das Geschlecht?

::: callout-note
#### Spielt das Geschlecht eine Rolle?

-   Der folgende Abschitt befasst sich nun ergänzend mit der Frage, welche Rolle das Geschlecht mit Blick auf die "Gültigkeit" der vorherigen Ergebnisse spielt
-   Dazu sind jedoch weitere Explorations- und Überarbeitungsschritte notwendig
:::

### 📋 Exercise 1: Übeprüfung der `_gender`-Variablen

::: callout-caution
#### Arbeitsauftrag 1.1

Nutzen Sie die Funktion `sjmisc::frq()` und schauen Sie sich im Datensatz `age_gaps_correct` die Variablen `actor_1_gender` und `actor_2_gender` an.
:::

```{r exercise_1_1}
# INSERT CODE HERE
```

::: callout-caution
#### Arbeitsauftrag 1.2

Nutzen Sie die Funktion `sjmisc::flat_talbe()` und den Datensatz `age_gaps_correct` um eine Kreuztabelle der Variablen `actor_1_gender` und `actor_2_gender` zu erstellen.
:::

```{r exercise_1_2}
# INSERT CODE HERE
```

### 🔎 Sind die Daten "konsistent"?

#### Überprüfung der Sortierung

```{r table-check-variable-arrangement}
age_gaps_correct %>% 
  summarise(
      p1_older = mean(actor_1_age > actor_2_age), # older person first?
      p1_male  = mean(actor_1_gender == "man"),  # male person first? 
      p_1_first_alpha = mean(actor_1_name < actor_2_name) # alphabetical order?
  )
```

### Überprüfung der Anzahl pro Paare pro Film

```{r table-check-couple-numbers}
# Create data
couples <- age_gaps_correct %>% 
  group_by(movie_name) %>% 
  summarise(n = n()) 

# Distribution
couples %>% frq(n)

# Movies with a loot of couples 
couples %>% 
  filter(n > 3) %>% 
  arrange(desc(n))
```

### Korrekturen

```{r recoding-data-to-consistent}
age_gaps_consistent <- age_gaps_correct %>% 
  # If multiple couples, assign couple number by movie
  mutate(
      couple_number = row_number(),
      .by = "movie_name"
  ) %>% 
  # Change data structure (one line per actor in a coulpe of a movie)
  pivot_longer(
    cols = starts_with(c("actor_1_", "actor_2_")),
    names_to = c(NA, NA, ".value"),
    names_sep = "_"
  ) %>% 
  # Put older actor first
  arrange(desc(age_difference), movie_name, birthdate) %>% 
    mutate(
    position = row_number(),
    .by = c("movie_name", "couple_number")
  ) %>% 
  pivot_wider(
    names_from = "position",
    names_glue = "actor_{position}_{.value}",
    values_from = c("name", "gender", "birthdate", "age")
  ) %>% 
  mutate(
    couple_structure = case_when(
      actor_1_gender == "woman" & actor_2_gender == "woman" ~ 1,
      actor_1_gender == "man" & actor_2_gender == "man" ~ 2,
      actor_1_gender != "man" ~ 3, 
      actor_1_gender == "man" ~ 4,
    ),
    older_male_hetero  = sjmisc::rec(
      couple_structure, 
      rec="3=0; 4=1; ELSE=NA", 
      to.factor = TRUE
    )
  )

```

### 🔎 Die zweite Datenexploration

### 📋 Exercise 2: Alterskombinationen im Überblick

::: callout-caution
## Arbeitauftrag 2

Nutzen Sie die Funktion `sjmisc::frq()` und schauen Sie sich im Datensatz `age_gaps_consistent` die Variablen `couple_structure` und `older_male_hetero` an.
:::

```{r exercise_2}
# INSERT CODE HERE
```

### 📋 Exercise 3: Wie sind die Altersunterschiede unterteilt, unter Berücksichtiung des Geschlechts?

::: callout-caution
#### Arbeitsauftrag 3.1 (graphische Überprüfung)

-   Erstellen Sie, auf Basis des Datensatzes `age_gaps_consistent`, einen `ggplot`.
-   Nutzen Sie im Argument `aes()` die Variable `age_difference` als `x`-Variable und `older_male_hetero` für das Argument `fill`.
-   Nutzen Sie `geom_bar` zur Erzeugung des Plots.
-   *Optional: Verwenden Sie `theme_pubr`*
:::

```{r exercise_3_1}
# INSERT CODE HERE
```


::: callout-caution
#### Arbeitsauftrag 3.2 (Überprüfung durch Modellierung)

1.  Erstellen Sie ein lineares Modell (`lm`), das die Variable `age_difference` als abhängige Variable und die Variablen `release_year` und `older_male_hetero` als unabhängige Variablen verwendet. Nutzen Sie dazu den Datensatz `age_gaps_consistent`.
2.  Geben Sie die Parameter des Modells mit der Funktion `parameters::parameters()` aus.
3.  Bewerten Sie die Modellleistung mit der Funktion `performance::model_performance()`.
4.  Erstellen Sie einen Bericht über das Modell mit der Funktion `report::report()`.
:::

```{r exercise_3_2}
# INSERT CODE HERE
```